File System Module 
1.      Get Input from Users

 
2.      Pass Multiple Arguments with Yargs

 
3.      File System Module

 
4.      Operations associated with File System Module &  JSON Data

Express.js
1.       Http Server and Client

 
2.    Express Framework

 
3.      Run a Web Server using Express Framework

 
4.      Routes

Asynchronous Programming
1.      Call Stack

 
2.      Callbacks, Callback Queue and Event Loop

 
3.      Callback Abstraction

 
4.      Callback Chaining

 
5.      Promises

 
6.      Promise Chaining

 
7.      Request Package

 
8.      Customizing HTTP Requests

 
9.      Error handing with appropriate HTTP codes

 
10.  Introduction to template engine (EJS)

Integration with MySQL
Creating Database and Tables in MySQL and Perfoming Data base operations ( Insert ,delete,update ,drop,join )

---------------------------------------------------------
Write a Node program for the following scenario:


	
1.Create 2 sample JSON Files 


➢ The First JSON File should contain Employee Name along with Employee Details and Project ID 

➢ Second JSON File should contain information about the Projects (containing Project ID and Related Details) 


	
2.Create 2 APIs, providing the following details: 


➢ First API would take the Employee Id as Input and Queries the underlying JSON File to fetch Employee Data at: (localhost:3000/employee/:id) 

➢ Second API would take the Project ID as input and Query the JSON File to fetch Project Information at: (localhost:3000/project/:id) 


	
3.Using the above specified APIs, create a new API at: (localhost:3000/getemployeedetails ) This API would get the Employee Data along with the details about the project.
	
4.Update and delete a particular object of a employee

------------------------------------------------------

2.  Create an Application which displays the Employees List to the user

1. Application will make a call to the API (http://5c055de56b84ee00137d25a0.mockapi.io/api/v1/employees) using Request Object

2. Once the data is available, the employee list along with the details should be visible to the User

3. The employee details would contain: 


	
 Name
	
 Id 
	
 Created At

--------------------------------------------------

1. Create a collection called “movies” and perform the queries listed below:

1) Add 5 movies to the collection, every movie should include the following properties: 


	
name 
	
genre(Horror,thriller,Science Fiction,Drama,Comedy,Art etc.,) 
	
rating (out of 10) 
	
language


2) Write a query that returns all the movies

3) Write a query that returns the three highest rated movies

4) Update the rating of all Comedy movies

5) Write a query to delete movie with least rating.
-------------------------------------------------------

2. Bug Tracker Application:


	
Create a user form to add bug, it should contain following field: 



	
Title 
	
Description 
	
Time (should auto fill with system date &time) 
	
Date (should auto fill with system date &time)
	
Assignee



	
All Data created should be saved in MySQL
	
Build a programming logic such that every bug should be resolved in 3 days, after third day the unresolved bug should be highlighted
	
Add one more field to show the leftover days to fix the bug (Total time is 3 days from the day bug is assigned)
-------------------------------------------

3.Authentication: 


As the APIs follow stateless protocol, authentication is used to server resource specific data.

 

 


	
1.Registration: 



	
Create a simple form with the following fields and save into the database.
	

		
Firstname
		
Lastname
		
Email
		
Password
		
Confirmpassword
	
	
	
Perform validation of mandatory. Above all fields are mandatory. Password and Confirm password should be the same, else display the error.
	
On successful submission of the above fields, store the values in database.
	
Database fields to store the information.
	

		
recid : bigint(20)
		
firstname: varchar(100)
		
lastname:varchar(100)
		
email:varchar(100)
		
password:varchar(255)
		
accesstoken:varchar(255)
		
dateadded
	
	


 

 

 


	
2.Login:


Once user is successfully registered, they can login and access further pages like dashboard, personal information, orders etc.

 


	
	

		
Create a Login form with following fields.
	
	



	
	

		
Email
		
Password
	
	


Above fields are mandatory to fill.

On submission of the above information, validate the entered details against the details which are stored in database. 


	
	

		
If login details are invalid, then give appropriate message of “Invalid credentials.”
		
If it is valid, then, generate one Access token and store it in the “accesstoken” column of the database against the relevant user. This access token will be unique across the all users in database. That means It will be used for specific user’s identification.
	
	


 

Next time, when user wants to access the dashboard/personal information/order page, then the request will contain the access token. We will send the access token as “Authorization” in header. 

          At NodeJS side, the token will be validated first that comes in the header of the request. This token will be checked in the database to identify the user. If it is validated successfully, then only further code will get executed, else, response code will be set as 401 as Unauthorized access and error message will be appear on the browser.

 

          Once, access token validated successfully, then only the requested data will be served.